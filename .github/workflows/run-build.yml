name: Build and Release Arttulcat

on:
  push:
    branches:
      - main # Automatically trigger on pushes to the 'main' branch
  workflow_dispatch: # Allows manual triggering from GitHub UI

# Grant permissions for the release job to create releases and tags
permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest] # macos-13 for amd64
        # You can add python-version and node-version to the matrix
        # if you need to test against or build with different versions.
        # python-version: ['3.9', '3.10', '3.11']
        # node-version: ['16', '18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # cache: 'pip' # Removed as project may not have requirements.txt/pyproject.toml at root
                         # Re-enable or use cache-dependency-path if you have these files.

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # cache: 'npm' # Removed as project may not have package-lock.json etc. at root
                         # Re-enable or use cache-dependency-path if you have these files.

      - name: Set up build environment for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential curl git mercurial zip unzip \
            autoconf2.13 libtool libffi-dev libgdk-pixbuf2.0-dev libgtk-3-dev \
            libdbus-1-dev libevent-dev libglib2.0-dev libssl-dev libx11-dev \
            libxcomposite-dev libxdamage-dev libxext-dev libxfixes-dev \
            libxrandr-dev libxtst-dev libxinerama-dev libncursesw5-dev \
            libnotify-dev libasound2-dev libpulse-dev libcairo2-dev libpixman-1-dev yasm

      - name: Set up build environment for macOS (amd64)
        if: matrix.os == 'macos-13'
        run: |
          xcode-select --install || true
          brew update
          brew install mercurial rust openssl@1.1
          # Optional: If openssl@1.1 needs to be found by build tools, uncomment and adjust:
          # echo "LDFLAGS=-L$(brew --prefix openssl@1.1)/lib" >> $GITHUB_ENV
          # echo "CPPFLAGS=-I$(brew --prefix openssl@1.1)/include" >> $GITHUB_ENV

      - name: Set up Git for Windows (Scoop then Chocolatey)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Attempting to install Git..."
          if (Get-Command scoop -ErrorAction SilentlyContinue) {
            Write-Host "Scoop is available. Attempting to install Git via Scoop."
            scoop install git
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Git installed successfully via Scoop."
            } else {
              Write-Warning "Scoop install git failed (Exit Code: $LASTEXITCODE). Attempting with Chocolatey."
              choco install -y git.install --skip-powershell
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Chocolatey install git also failed (Exit Code: $LASTEXITCODE). Failing step."
                  exit 1
              }
              Write-Host "Git installed successfully via Chocolatey."
            }
          } else {
            Write-Host "Scoop not found. Installing Git via Chocolatey."
            choco install -y git.install --skip-powershell
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Chocolatey install git failed (Exit Code: $LASTEXITCODE). Failing step."
              exit 1
            }
            Write-Host "Git installed successfully via Chocolatey."
          }
          Write-Host "Verifying Git installation:"
          git --version

      - name: Set up Mercurial for Windows (via winget)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Attempting to install Mercurial via winget..."
          # Ensure winget source is updated (good practice, though usually not strictly necessary on fresh runners)
          winget source update --name winget
          
          # Install Mercurial. Mercurial.Mercurial is the ID.
          # -e is equivalent to --exact for matching the ID.
          # --accept-package-agreements and --accept-source-agreements are for non-interactive install.
          # --source winget explicitly uses the default winget community repository.
          Write-Host "Running: winget install --id Mercurial.Mercurial --exact --source winget --accept-package-agreements --accept-source-agreements"
          winget install --id Mercurial.Mercurial --exact --source winget --accept-package-agreements --accept-source-agreements
          
          if ($LASTEXITCODE -ne 0) {
              Write-Error "winget install Mercurial failed (Exit Code: $LASTEXITCODE). Failing step."
              # You might want to try a search if install fails due to ID changes
              # Write-Host "Attempting to search for Mercurial packages with winget..."
              # winget search Mercurial
              exit 1
          }
          Write-Host "Mercurial installation via winget initiated successfully."

          # Winget usually adds to PATH, but changes might not be picked up by the current PS session immediately.
          # For subsequent steps in the same job, especially if they are new processes (like a bash shell for build.sh),
          # the PATH should be updated. We can try to force a refresh for the current session variables.
          Write-Host "Refreshing PATH for current session..."
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

          # Verification
          Write-Host "Verifying Mercurial installation..."
          try {
              hg --version
              Write-Host "Mercurial is installed and accessible."
          } catch {
              Write-Error "Failed to run 'hg --version'. Mercurial installation may have failed or PATH is not correctly set up for the current session. Please check winget output."
              # List common Mercurial install locations to help debug if PATH is an issue.
              Write-Host "Common install locations for Mercurial: C:\Program Files\Mercurial or check user's AppData\Local\Programs\Mercurial"
              exit 1
          }

      - name: Make build script executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: chmod +x ./build.sh

      - name: Run Arttulcat build script
        shell: bash 
        run: |
          ./build.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: arttulcat-build-${{ matrix.os }}
          path: ./release_artifacts/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts 

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Arttulcat Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.tar.gz
            artifacts/arttulcat-build-macos-13/arttulcat.dmg
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.deb
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.rpm
            artifacts/arttulcat-build-windows-latest/arttulcat.exe

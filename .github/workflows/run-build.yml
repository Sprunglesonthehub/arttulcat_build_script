name: Build and Release Arttulcat

on:
  push:
    branches:
      - main # Automatically trigger on pushes to the 'main' branch
  workflow_dispatch: # Allows manual triggering from GitHub UI

# Grant permissions for the release job to create releases and tags
permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest] # macos-13 for amd64
        # You can add python-version and node-version to the matrix
        # if you need to test against or build with different versions.
        # python-version: ['3.9', '3.10', '3.11']
        # node-version: ['16', '18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # cache: 'pip' # Removed as project may not have requirements.txt/pyproject.toml at root
                         # Re-enable or use cache-dependency-path if you have these files.

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # cache: 'npm' # Removed as project may not have package-lock.json etc. at root
                         # Re-enable or use cache-dependency-path if you have these files.

      - name: Set up build environment for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential curl git mercurial zip unzip \
            autoconf2.13 libtool libffi-dev libgdk-pixbuf2.0-dev libgtk-3-dev \
            libdbus-1-dev libevent-dev libglib2.0-dev libssl-dev libx11-dev \
            libxcomposite-dev libxdamage-dev libxext-dev libxfixes-dev \
            libxrandr-dev libxtst-dev libxinerama-dev libncursesw5-dev \
            libnotify-dev libasound2-dev libpulse-dev libcairo2-dev libpixman-1-dev yasm

      - name: Set up build environment for macOS (amd64)
        if: matrix.os == 'macos-13'
        run: |
          xcode-select --install || true
          brew update
          brew install mercurial rust openssl@1.1
          # Optional: If openssl@1.1 needs to be found by build tools, uncomment and adjust:
          # echo "LDFLAGS=-L$(brew --prefix openssl@1.1)/lib" >> $GITHUB_ENV
          # echo "CPPFLAGS=-I$(brew --prefix openssl@1.1)/include" >> $GITHUB_ENV

      - name: Set up Git for Windows (Scoop then Chocolatey)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Attempting to install Git..."
          if (Get-Command scoop -ErrorAction SilentlyContinue) {
            Write-Host "Scoop is available. Attempting to install Git via Scoop."
            scoop install git
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Git installed successfully via Scoop."
            } else {
              Write-Warning "Scoop install git failed (Exit Code: $LASTEXITCODE). Attempting with Chocolatey."
              choco install -y git.install --skip-powershell
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Chocolatey install git also failed (Exit Code: $LASTEXITCODE). Failing step."
                  exit 1
              }
              Write-Host "Git installed successfully via Chocolatey."
            }
          } else {
            Write-Host "Scoop not found. Installing Git via Chocolatey."
            choco install -y git.install --skip-powershell
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Chocolatey install git failed (Exit Code: $LASTEXITCODE). Failing step."
              exit 1
            }
            Write-Host "Git installed successfully via Chocolatey."
          }
          Write-Host "Verifying Git installation:"
          git --version

      - name: Set up Mercurial for Windows (via pipx)
        if: matrix.os == 'windows-latest'
        shell: pwsh # Using PowerShell for consistency, but commands are mostly cross-platform
        run: |
          Write-Host "Installing pipx..."
          python -m pip install --user pipx
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to install pipx. (Exit Code: $LASTEXITCODE). Failing step."
              exit 1
          }
          Write-Host "pipx installed."

          Write-Host "Ensuring pipx paths are configured..."
          # On Windows, python -m pipx ensurepath might not update the current session's PATH immediately
          # or affect GITHUB_PATH needed for subsequent steps. We'll manually find and add it.
          # The default location for pipx binaries on Windows is %USERPROFILE%\.local\bin
          $PipxBinPath = Join-Path $env:USERPROFILE ".local\bin"
          Write-Host "Adding $PipxBinPath to GITHUB_PATH"
          echo "$PipxBinPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Also add to current session's PATH for immediate use if pipx command is called directly
          $env:PATH = "$PipxBinPath;" + $env:PATH
          Write-Host "Current PATH: $env:PATH"


          Write-Host "Installing Mercurial via pipx..."
          # Use the full path to pipx if it's not yet on PATH for this very first command
          # However, after adding to GITHUB_PATH and current $env:PATH, just 'pipx' should work.
          pipx install mercurial
          if ($LASTEXITCODE -ne 0) {
              Write-Error "pipx install mercurial failed (Exit Code: $LASTEXITCODE). Failing step."
              # Try to get more info
              pipx list
              exit 1
          }
          Write-Host "Mercurial installation via pipx initiated successfully."

          # Verification
          Write-Host "Verifying Mercurial installation..."
          try {
              hg --version
              Write-Host "Mercurial is installed and accessible via pipx."
          } catch {
              Write-Error "Failed to run 'hg --version'. Mercurial (via pipx) installation may have failed or PATH is not correctly set up."
              Write-Host "pipx bin path: $PipxBinPath"
              Write-Host "Checking if hg.exe exists: $(Test-Path (Join-Path $PipxBinPath 'hg.exe'))"
              exit 1
          }

      - name: Make build script executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: chmod +x ./build.sh

      - name: Run Arttulcat build script
        shell: bash 
        run: |
          ./build.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: arttulcat-build-${{ matrix.os }}
          path: ./release_artifacts/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts 

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Arttulcat Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.tar.gz
            artifacts/arttulcat-build-macos-13/arttulcat.dmg
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.deb
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.rpm
            artifacts/arttulcat-build-windows-latest/arttulcat.exe

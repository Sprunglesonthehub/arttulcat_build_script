name: Build and Release Arttulcat

on:
  push:
    branches:
      - main # Automatically trigger on pushes to the 'main' branch
  workflow_dispatch: # Allows manual triggering from GitHub UI

# Grant permissions for the release job to create releases and tags
permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest] # macos-13 for amd64
        # You can add python-version and node-version to the matrix
        # if you need to test against or build with different versions.
        # python-version: ['3.9', '3.10', '3.11']
        # node-version: ['16', '18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # cache: 'pip' # Removed as project may not have requirements.txt/pyproject.toml at root
                         # Re-enable or use cache-dependency-path if you have these files.

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # cache: 'npm' # Removed as project may not have package-lock.json etc. at root
                         # Re-enable or use cache-dependency-path if you have these files.

      - name: Set up build environment for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential curl git mercurial zip unzip \
            autoconf2.13 libtool libffi-dev libgdk-pixbuf2.0-dev libgtk-3-dev \
            libdbus-1-dev libevent-dev libglib2.0-dev libssl-dev libx11-dev \
            libxcomposite-dev libxdamage-dev libxext-dev libxfixes-dev \
            libxrandr-dev libxtst-dev libxinerama-dev libncursesw5-dev \
            libnotify-dev libasound2-dev libpulse-dev libcairo2-dev libpixman-1-dev yasm

      - name: Set up build environment for macOS (amd64)
        if: matrix.os == 'macos-13'
        run: |
          xcode-select --install || true
          brew update
          brew install mercurial rust openssl@1.1
          # Optional: If openssl@1.1 needs to be found by build tools, uncomment and adjust:
          # echo "LDFLAGS=-L$(brew --prefix openssl@1.1)/lib" >> $GITHUB_ENV
          # echo "CPPFLAGS=-I$(brew --prefix openssl@1.1)/include" >> $GITHUB_ENV

      - name: Set up Git for Windows (Scoop then Chocolatey)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Attempting to install Git..."
          if (Get-Command scoop -ErrorAction SilentlyContinue) {
            Write-Host "Scoop is available. Attempting to install Git via Scoop."
            scoop install git
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Git installed successfully via Scoop."
            } else {
              Write-Warning "Scoop install git failed (Exit Code: $LASTEXITCODE). Attempting with Chocolatey."
              choco install -y git.install --skip-powershell
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Chocolatey install git also failed (Exit Code: $LASTEXITCODE). Failing step."
                  exit 1
              }
              Write-Host "Git installed successfully via Chocolatey."
            }
          } else {
            Write-Host "Scoop not found. Installing Git via Chocolatey."
            choco install -y git.install --skip-powershell
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Chocolatey install git failed (Exit Code: $LASTEXITCODE). Failing step."
              exit 1
            }
            Write-Host "Git installed successfully via Chocolatey."
          }
          Write-Host "Verifying Git installation:"
          git --version

      - name: Set up Mercurial for Windows (Scoop then MSI)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Attempting to install Mercurial..."
          $InstalledViaScoop = $false

          # Try Scoop first
          if (Get-Command scoop -ErrorAction SilentlyContinue) {
              Write-Host "Scoop is available. Attempting to install Mercurial via Scoop."
              scoop install mercurial
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "Mercurial installed successfully via Scoop."
                  $InstalledViaScoop = $true
              } else {
                  Write-Warning "Scoop install mercurial failed (Exit Code: $LASTEXITCODE). Will attempt MSI download."
              }
          } else {
              Write-Host "Scoop not found. Will attempt MSI download for Mercurial."
          }

          if (-not $InstalledViaScoop) {
              # Fallback to MSI download and install
              $MercurialVersion = "6.7.3" # Using a specific stable version for consistency. Update if needed.
              $MsiFileName = "mercurial-${MercurialVersion}-x64.msi"
              $MsiUrl = "https://www.mercurial-scm.org/release/windows/${MsiFileName}"
              $TempDir = $env:TEMP
              $MsiPath = Join-Path $TempDir $MsiFileName

              try {
                  Write-Host "Downloading Mercurial MSI from $MsiUrl to $MsiPath..."
                  Invoke-WebRequest -Uri $MsiUrl -OutFile $MsiPath -UseBasicParsing
                  Write-Host "Download complete. Installing Mercurial via MSI..."
                  
                  $msiArgs = "/i `"$MsiPath`" /qn /norestart ADDLOCAL=ALL"
                  Write-Host "Running: msiexec $msiArgs"
                  $process = Start-Process msiexec -ArgumentList $msiArgs -Wait -PassThru
                  
                  if ($process.ExitCode -ne 0 -and $process.ExitCode -ne 3010) { # 3010 is success, reboot required
                      Write-Error "MSI installation failed with exit code $($process.ExitCode)."
                      throw "MSI Installation Failed"
                  }
                  Write-Host "Mercurial MSI installation seems successful (Exit Code: $($process.ExitCode))."

                  Write-Host "Refreshing PATH environment variable for current session..."
                  $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
                  
                  $MercurialProgFiles = "C:\Program Files\Mercurial"
                  if (Test-Path "$MercurialProgFiles\hg.exe") {
                      Write-Host "Adding $MercurialProgFiles to GITHUB_PATH for subsequent steps."
                      echo "$MercurialProgFiles" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                  } else {
                      Write-Warning "Mercurial not found in $MercurialProgFiles after MSI install. Assuming MSI handled PATH correctly for new processes or it's elsewhere."
                  }

              } catch {
                  Write-Error "An error occurred during Mercurial MSI download or installation: $($_.Exception.Message)"
                  if (Test-Path $MsiPath) {
                      Remove-Item $MsiPath -ErrorAction SilentlyContinue
                  }
                  exit 1
              } finally {
                  if (Test-Path $MsiPath) {
                      Remove-Item $MsiPath -ErrorAction SilentlyContinue
                  }
              }
          }

          # Final verification
          Write-Host "Verifying Mercurial installation..."
          try {
              hg --version
              Write-Host "Mercurial is installed and accessible."
          } catch {
              Write-Error "Failed to run 'hg --version'. Mercurial installation may have failed or PATH is not correctly set up for the current session."
              exit 1
          }

      - name: Make build script executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: chmod +x ./build.sh

      - name: Run Arttulcat build script
        shell: bash 
        run: |
          ./build.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: arttulcat-build-${{ matrix.os }}
          path: ./release_artifacts/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts 

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Arttulcat Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.tar.gz
            artifacts/arttulcat-build-macos-13/arttulcat.dmg
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.deb
            artifacts/arttulcat-build-ubuntu-latest/arttulcat.rpm
            artifacts/arttulcat-build-windows-latest/arttulcat.exe
